unmanaged;

define behavior for ZI_RAP_Travel_U_30329 alias Travel
implementation in class zbp_i_rap_travel_u_30329 unique
lock master
etag master Lastchangedat
{
  create;
  update;
  delete;
  association _Booking { create; }

  field ( read only ) TravelID;
  field ( mandatory ) AgencyID, CustomerID, BeginDate, EndDate;

  mapping for /DMO/TRAVEL control zsrap_travel_x_30329
  {
    TravelId = travel_id;
    AgencyId = AGENCY_ID;
    CustomerId = CUSTOMER_ID;
    BeginDate = BEGIN_DATE;
    EndDate = END_DATE;
    BookingFee = BOOKING_FEE;
    TotalPrice = TOTAL_PRICE;
    CurrencyCode = CURRENCY_CODE;
    Description = DESCRIPTION;
    Status = STATUS;
    Createdby = CREATEDBY;
    Createdat = CREATEDAT;
    Lastchangedby = LASTCHANGEDBY;
    Lastchangedat = LASTCHANGEDAT;
  }

//Explanation:

//When accessing the legacy code, the developer would normally have to use "move corresponding with mapping"
//in many places to map input derived types such as type table for create, type table for action import to
//legacy types and vice versa to map legacy results to output derived types such as type table for action result,
 //type table for read result or failed. In legacy scenarios that are based on BAPIs so called control structures
 //or “x-structures” are used. These structures have the same field name, but all beside the key fields have the
 //same type char1 to tell the BAPI with the transferred value (TRUE or FALSE) whether data has been provided for
  //the corresponding field. This type has the same function as the %CONTROL structure in input derived types,
  //which indicates which of the fields in the main structure are accessed by an operation (update, read, and so on).
  //But since the fieldnames in the %CONTROL structure differs from the one being used by BAPI’s we must perform a mapping
  //here as well. The solution is now to introduce a central, declarative mapping within the behavior definition instead of
  //many individual corresponding statements. This improves maintainability of the application's source code.
}

define behavior for ZI_RAP_Booking_U_30329 alias Booking
implementation in class zbp_i_rap_booking_u_30329 unique
lock dependent by _Travel
etag dependent by _Travel
{
  update;
  delete;
  association _Travel;

  field ( read only ) TravelID, BookingID;
  field ( mandatory ) BookingDate, CustomerID, CarrierId, ConnectionID, FlightDate;

mapping for /DMO/BOOKING control zsrap_booking_x_30329
  {
    TravelId = TRAVEL_ID;
    BookingId = BOOKING_ID;
    BookingDate = BOOKING_DATE;
    CustomerId = CUSTOMER_ID;
    CarrierId = CARRIER_ID;
    ConnectionId = CONNECTION_ID;
    FlightDate = FLIGHT_DATE;
    FlightPrice = FLIGHT_PRICE;
    CurrencyCode = CURRENCY_CODE;
  }

}